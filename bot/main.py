from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import os
import pandas as pd
import csv
from datetime import datetime

from bot.trend_storage import save_trend_to_csv, get_user_trends, update_trend, delete_trend

# =========================
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
DATA_PATH = "data/trends.csv"

# =========================
# –ö–Ω–æ–ø–∫–∏
MAIN_MENU_BUTTONS = [
    ["–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–¥", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É"],
    ["–ú–æ–∏ —Ç—Ä–µ–Ω–¥—ã"]
]
CATEGORY_BUTTONS = [["1", "2", "3"], ["4", "5", "6"], ["–ù–∞–∑–∞–¥"]]
TIMEZONE_BUTTONS = [["1", "2"], ["3", "4"], ["–ù–∞–∑–∞–¥"]]

# =========================
# –°–ª–æ–≤–∞—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
CATEGORIES = {
    "1": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "2": "–ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏",
    "3": "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
    "4": "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "5": "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "6": "–î—Ä—É–≥–æ–µ"
}

TIME_ZONES = {
    "1": "–°–µ–π—á–∞—Å (–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å)",
    "2": "1-5 –ª–µ—Ç (–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
    "3": "5-20 –ª–µ—Ç (–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
    "4": "20+ –ª–µ—Ç (–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)"
}


# =========================
# –ë–æ—Ç –∫–æ–º–∞–Ω–¥—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ç—Ä–µ–Ω–¥ –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    state = user_states.get(user_id)

    if not state:
        if text.lower() == "–∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–¥":
            user_states[user_id] = {"step": "choose_category", "category": None, "time_zone": None, "trend": None}
            keyboard = ReplyKeyboardMarkup(CATEGORY_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:*\n\n"
                "`1.` –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
                "`2.` –ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏\n"
                "`3.` –ö—É–ª—å—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n"
                "`4.` –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
                "`5.` –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
                "`6.` –î—Ä—É–≥–æ–µ",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return

        if text.lower() == "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É":
            await update.message.reply_text("(–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–¥–∞—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã)")
            return

        if text.lower() == "–º–æ–∏ —Ç—Ä–µ–Ω–¥—ã":
            user_trends = get_user_trends(user_id)
            if not user_trends:
                keyboard = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
                await update.message.reply_text(
                    "–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ —Ç—Ä–µ–Ω–¥.",
                    reply_markup=keyboard
                )
                user_states.pop(user_id, None)
                return

            trends_list = ""
            for idx, trend in enumerate(user_trends, start=1):
                trends_list += f"{idx}. {trend['trend']} ({trend['category']} / {trend['time_zone']})\n"

            keyboard = ReplyKeyboardMarkup(
                [["–ò–∑–º–µ–Ω–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"], ["–ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )

            user_states[user_id] = {
                "step": "choose_action_for_trend",
                "trends": user_trends
            }

            await update.message.reply_text(
                f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤:\n\n{trends_list}",
                reply_markup=keyboard
            )
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚¨áÔ∏è")
        return

    # ========== FSM —ç—Ç–∞–ø—ã ==========

    # –†–∞–∑–¥–µ–ª "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–¥"
    # ===========================
    if state["step"] == "choose_category":
        if text == "–ù–∞–∑–∞–¥":
            user_states.pop(user_id)
            keyboard = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
            await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
            return

        if text in CATEGORIES:
            user_states[user_id]["category"] = CATEGORIES[text]
            user_states[user_id]["step"] = "choose_time_zone"
            keyboard = ReplyKeyboardMarkup(TIMEZONE_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞:*\n\n"
                "`1.` –°–µ–π—á–∞—Å (–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å)\n"
                "`2.` 1-5 –ª–µ—Ç (–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`3.` 5-20 –ª–µ—Ç (–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`4.` 20+ –ª–µ—Ç (–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚¨áÔ∏è")

    if state["step"] == "choose_time_zone":
        if text == "–ù–∞–∑–∞–¥":
            user_states[user_id]["step"] = "choose_category"
            keyboard = ReplyKeyboardMarkup(CATEGORY_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:*\n\n"
                "`1.` –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
                "`2.` –ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏\n"
                "`3.` –ö—É–ª—å—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n"
                "`4.` –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
                "`5.` –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
                "`6.` –î—Ä—É–≥–æ–µ",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return

        if text in TIME_ZONES:
            user_states[user_id]["time_zone"] = TIME_ZONES[text]
            user_states[user_id]["step"] = "input_trend"
            keyboard = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç—Ä–µ–Ω–¥:",
                reply_markup=keyboard
            )
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚¨áÔ∏è")

    if state["step"] == "input_trend":
        if text == "–ù–∞–∑–∞–¥":
            user_states[user_id]["step"] = "choose_time_zone"
            keyboard = ReplyKeyboardMarkup(TIMEZONE_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞:*\n\n"
                "`1.` –°–µ–π—á–∞—Å (–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å)\n"
                "`2.` 1-5 –ª–µ—Ç (–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`3.` 5-20 –ª–µ—Ç (–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`4.` 20+ –ª–µ—Ç (–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–¥
        trend_text = text
        category = user_states[user_id]["category"]
        time_zone = user_states[user_id]["time_zone"]

        save_trend_to_csv(user_id, category, time_zone, trend_text)
        user_states.pop(user_id)

        keyboard = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å –Ω–∞–º–∏ —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏! üòä",
            reply_markup=keyboard
        )
        return
    

    # ==== FSM —ç—Ç–∞–ø—ã: —Ä–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ ====

    # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
    if state["step"] == "choose_action_for_trend":
        if text == "–ù–∞–∑–∞–¥":
            user_states.pop(user_id, None)
            keyboard = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=keyboard
            )
            return

        if text == "–ò–∑–º–µ–Ω–∏—Ç—å":
            user_states[user_id]["step"] = "select_trend_to_edit"
            trends = user_states[user_id]["trends"]
            buttons = [[str(i)] for i in range(1, len(trends) + 1)]
            buttons += [["–ù–∞–∑–∞–¥"]]
            keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                reply_markup=keyboard
            )
            return

        if text == "–£–¥–∞–ª–∏—Ç—å":
            user_states[user_id]["step"] = "select_trend_to_delete"
            trends = user_states[user_id]["trends"]
            buttons = [[str(i)] for i in range(1, len(trends) + 1)]
            buttons += [["–ù–∞–∑–∞–¥"]]
            keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                reply_markup=keyboard
            )
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚¨áÔ∏è")

    # –í—ã–±–æ—Ä —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if state["step"] == "select_trend_to_delete":
        if text == "–ù–∞–∑–∞–¥":
            user_states[user_id]["step"] = "choose_action_for_trend"
            keyboard = ReplyKeyboardMarkup([["–ò–∑–º–µ–Ω–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"], ["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text(
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ç—Ä–µ–Ω–¥–∞–º–∏?",
                reply_markup=keyboard
            )
            return

        if text.isdigit():
            idx = int(text) - 1
            trends = user_states[user_id]["trends"]
            if 0 <= idx < len(trends):
                from bot.trend_storage import delete_trend
                trend = trends[idx]
                delete_trend(int(trend["id"]), user_id)

                user_states.pop(user_id, None)
                keyboard = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
                await update.message.reply_text(
                    "–¢—Ä–µ–Ω–¥ —É–¥–∞–ª—ë–Ω! üóëÔ∏è",
                    reply_markup=keyboard
                )
                return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–¥–∞ ‚¨áÔ∏è")

    # –í—ã–±–æ—Ä —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if state["step"] == "select_trend_to_edit":
        if text == "–ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (–ò–∑–º–µ–Ω–∏—Ç—å / –£–¥–∞–ª–∏—Ç—å / –ù–∞–∑–∞–¥)
            user_states[user_id]["step"] = "choose_action_for_trend"
            keyboard = ReplyKeyboardMarkup(
                [["–ò–∑–º–µ–Ω–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"], ["–ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ç—Ä–µ–Ω–¥–∞–º–∏?",
                reply_markup=keyboard
            )
            return

        if text.isdigit():
            idx = int(text) - 1
            trends = user_states[user_id]["trends"]

            if 0 <= idx < len(trends):
                trend = trends[idx]
                user_states[user_id] = {
                    "step": "editing_category",
                    "trend_to_edit": trend,
                    "new_category": None,
                    "new_time_zone": None,
                    "new_trend_text": None,
                    "trends": trends  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤ —á—Ç–æ–±—ã "–ù–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–ª!
                }
                keyboard = ReplyKeyboardMarkup(CATEGORY_BUTTONS, resize_keyboard=True)
                await update.message.reply_text(
                    "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–¥–∞:*\n\n"
                    "`1.` –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
                    "`2.` –ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏\n"
                    "`3.` –ö—É–ª—å—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n"
                    "`4.` –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
                    "`5.` –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
                    "`6.` –î—Ä—É–≥–æ–µ",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                return

        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–¥–∞ ‚¨áÔ∏è"
        )


    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if state["step"] == "editing_category":
        if text == "–ù–∞–∑–∞–¥":
            user_states[user_id]["step"] = "select_trend_to_edit"
            trends = user_states[user_id]["trends"]
            buttons = [[str(i)] for i in range(1, len(trends) + 1)]
            buttons.append(["–ù–∞–∑–∞–¥"])
            keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                reply_markup=keyboard
            )
            return

        if text in CATEGORIES:
            user_states[user_id]["new_category"] = CATEGORIES[text]
            user_states[user_id]["step"] = "editing_time_zone"
            keyboard = ReplyKeyboardMarkup(TIMEZONE_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞:*\n\n"
                "`1.` –°–µ–π—á–∞—Å (–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å)\n"
                "`2.` 1-5 –ª–µ—Ç (–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`3.` 5-20 –ª–µ—Ç (–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`4.` 20+ –ª–µ—Ç (–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚¨áÔ∏è")

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if state["step"] == "editing_time_zone":
        if text == "–ù–∞–∑–∞–¥":
            user_states[user_id]["step"] = "editing_category"
            keyboard = ReplyKeyboardMarkup(CATEGORY_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–¥–∞:*\n\n"
                "`1.` –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
                "`2.` –ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏\n"
                "`3.` –ö—É–ª—å—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n"
                "`4.` –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
                "`5.` –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
                "`6.` –î—Ä—É–≥–æ–µ",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return

        if text in TIME_ZONES:
            user_states[user_id]["new_time_zone"] = TIME_ZONES[text]
            user_states[user_id]["step"] = "editing_trend_text"
            keyboard = ReplyKeyboardMarkup([["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–∏–º –∂–µ"], ["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–µ–Ω–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–∏–º –∂–µ\" ‚¨áÔ∏è",
                reply_markup=keyboard
            )
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚¨áÔ∏è")

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
    if state["step"] == "editing_trend_text":
        if text == "–ù–∞–∑–∞–¥":
            user_states[user_id]["step"] = "editing_time_zone"
            keyboard = ReplyKeyboardMarkup(TIMEZONE_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞:*\n\n"
                "`1.` –°–µ–π—á–∞—Å (–ù–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å)\n"
                "`2.` 1-5 –ª–µ—Ç (–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`3.` 5-20 –ª–µ—Ç (–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                "`4.` 20+ –ª–µ—Ç (–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            return

        trend_text = None if text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–∏–º –∂–µ" else text

        from bot.trend_storage import update_trend

        trend = user_states[user_id]["trend_to_edit"]
        success = update_trend(
            trend_id=int(trend["id"]),
            user_id=user_id,
            new_trend_text=trend_text,
            new_category=user_states[user_id]["new_category"],
            new_time_zone=user_states[user_id]["new_time_zone"]
        )

        keyboard = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
        user_states.pop(user_id, None)

        if success:
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –¢—Ä–µ–Ω–¥ –æ–±–Ω–æ–≤–ª—ë–Ω! ‚úÖ",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞ üò¢",
                reply_markup=keyboard
            )


# =========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
